<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-12-13 at 17:20:46.
 */
require './models/AdministratorModel.php';
require_once('./lang/en.php');

//require '/../../models/AdministratorModel.php';
//require_once('/../../lang/en.php');
class AdministratorModelTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AdministratorModel
     */
    protected $administratorModel;
    protected $dal;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
       /* $this->administratorModel = new AdministratorModel("C:/wamp/www/zzAgenda/test/persistence/DB/user.json",
                            "C:/wamp/www/zzAgenda/test/persistence/DB/conference.json",
                            "C:/wamp/www/zzAgenda/test/persistence/DB/like.json");
        $this->dal = new DAL("C:/wamp/www/zzAgenda/test/persistence/DB/user.json",
                            "C:/wamp/www/zzAgenda/test/persistence/DB/conference.json",
                            "C:/wamp/www/zzAgenda/test/persistence/DB/like.json");*/
        $this->administratorModel = new AdministratorModel("./test/persistence/DB/user.json",
                            "./test/persistence/DB/conference.json",
                            "./test/persistence/DB/like.json");
        $this->dal = new DAL("./test/persistence/DB/user.json",
                            "./test/persistence/DB/conference.json",
                            "./test/persistence/DB/like.json");
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers AdministratorModel::connect
     * @todo   Implement testConnectUserNotKnown().
     */
    public function testConnectUserNotKnown() {
        global $language;
        $email="unknown";
        $pwd="none";
        try{
            $this->administratorModel->connect($email, $pwd);
        } catch (Exception $ex) {
            $this->assertEquals($language['email_not_recognized'], $ex->getMessage());
        }
    }
    
    /**
     * @covers AdministratorModel::connect
     * @todo   Implement testConnectPasswordNotValid().
     */
    public function testConnectPasswordNotValid() {
        global $language;
        $email="thomasfiliol@yahoo.fr";
        $pwd="none";
        try{
            $this->administratorModel->connect($email, $pwd);
        } catch (Exception $ex) {
            $this->assertEquals($language['password_not_valid'], $ex->getMessage());
        }
    }
    
    /**
     * @covers AdministratorModel::connect
     * @todo   Implement testConnectWork().
     */
    public function testConnectWork() {
        global $language;
        $email="thomasfiliol@yahoo.fr";
        $pwd="projetWeb";
        $this->administratorModel->connect($email, $pwd);
        $this->assertEquals("thomasfiliol@yahoo.fr",$_SESSION['login']);
        $this->assertEquals("admin",$_SESSION['role']);
        
    }
    
    /**
     * @covers AdministratorModel::connect
     * @todo   Implement testConnectUserAlreadyConnected().
     */
    public function testConnectUserAlreadyConnected() {
        global $language;
        $email="thomasfiliol@yahoo.fr";
        $pwd="projetWeb";
        try{
            $this->administratorModel->connect($email, $pwd);
        } catch (Exception $ex) {
            $this->assertEquals($language['already_connected'], $ex->getMessage());
        }
        
    }
    
        /**
     * @covers AdministratorModel::connect
     * @todo   Implement testConnectWorkForUser().
     */
    public function testConnectWorkForUser() {
        global $language;
        $email="charlesdupont@gmail.com";
        $pwd="projetWeb";
        $this->administratorModel->connect($email, $pwd);
        $this->assertEquals("charlesdupont@gmail.com",$_SESSION['login']);
        $this->assertEquals("user",$_SESSION['role']);        
    }
    
    /**
     * @covers AdministratorModel::disconnect
     * @todo   Implement testDisconnect().
     */
    public function testDisconnect() {
        $_SESSION['login'] = "thomasfiliol@yahoo.fr";
        $this->administratorModel->disconnect();
        $_SESSION['login'] = "charlesdupont@gmail.com";
        $this->administratorModel->disconnect();
    }

    /**
     * @covers AdministratorModel::isAdmin
     * @todo   Implement testIsAdmin().
     */
    public function testIsAdmin() {
        $this->assertFalse($this->administratorModel->isAdmin());
        $_SESSION['role'] = "user";
        $this->assertFalse($this->administratorModel->isAdmin());
        $_SESSION['role'] = "admin";
        $this->assertTrue($this->administratorModel->isAdmin());
        unset($_SESSION['role']);        
    }

    /**
     * @covers AdministratorModel::addConf
     * @todo   Implement testAddConf().
     */
    public function testAddConf() {
        $confs = $this->dal->get_conferences();
        $lengthOld = count($confs);
        $this->administratorModel->addConf("1512134224", "title test", "Clermont-Ferrand", "Oscar Benitez", "test description");
        $confs = $this->dal->get_conferences();
        $lengthNew = count($confs);
        $this->assertEquals($lengthNew,$lengthOld+1);
        $keys = array_keys($confs);
        $last_key = $keys[count($keys)-1];
        $this->assertEquals("Oscar Benitez",$confs[$last_key]["speaker"]);
    }
    
    
    /**
     * @covers AdministratorModel::editConf
     * @todo   Implement testEditConf().
     */
    public function testEditConf() {
        $confs = $this->dal->get_conferences();
        $lengthOld = count($confs);
        $keys = array_keys($confs);
        $last_key = $keys[count($keys)-1];
        $conf = new Conference($last_key, "1512134224", "title test","test description","Clermont-Ferrand","James Long");
        $this->administratorModel->editConf($conf);
        $confs = $this->dal->get_conferences();
        $lengthNew = count($confs);
        $this->assertEquals($lengthNew,$lengthOld);
        $this->assertEquals("James Long",$confs[$last_key]["speaker"]);
    }

    /**
     * @covers AdministratorModel::delConf
     * @todo   Implement testDelConf().
     */
    public function testDelConf() {
        $confs = $this->dal->get_conferences();
        $lengthOld = count($confs);
        $keys = array_keys($confs);
        $last_key = $keys[count($keys)-1]; 
        $this->administratorModel->delConf($last_key);
        $confs = $this->dal->get_conferences();
        $lengthNew = count($confs);
        $this->assertEquals($lengthNew,$lengthOld-1);       
    }

}
