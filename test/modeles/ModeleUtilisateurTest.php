<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-17 at 14:06:51.
 */
require_once '/../../modeles/ModeleUtilisateur.php';
require_once '/../../persistance/DAL.php';
require_once '/../../persistance/BaseDeDonnee.php';
require_once '/../../metiers/ArticleWeb.php';
require_once '/../../metiers/FluxRSS.php';
require_once '/../../metiers/Hote.php';
class ModeleUtilisateurTest extends PHPUnit_Framework_TestCase {

    /**
     * @var UserModel
     */
    private $modeleUtilisateur;
    

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        $this->modeleUtilisateur = new UserModel();
        global $host,$base,$login,$mdp;
        $host="mysql:host=localhost;";
        $base="dbname=vsi";
        $login="root";
        $mdp="";
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers ModeleUtilisateur::donnerDerniersArticles
     * @todo   Implement testDonnerDerniersArticles().
     */
    public function testDonnerDerniersArticles() {
        $tabArticleWeb = $this->modeleUtilisateur->donnerDerniersArticles("date_publication");
        $this->assertInstanceOf("ArticleWeb",$tabArticleWeb[0]);
    }

    /**
     * @covers ModeleUtilisateur::donnerMotsClefsArticle
     * @todo   Implement testDonnerMotsClefsArticle().
     */
    public function testDonnerMotsClefsArticle() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerMotsClefsArticle("089ebd5bb4"));
    }

    /**
     * @covers ModeleUtilisateur::donnerArticle
     * @todo   Implement testDonnerArticle().
     */
    public function testDonnerArticle() {
        $this->assertInstanceOf("ArticleWeb",  $this->modeleUtilisateur->donnerArticle("089ebd5bb4"));
    }

    /**
     * @covers ModeleUtilisateur::donnerListeCategoriesMaladies
     * @todo   Implement testDonnerListeCategoriesMaladies().
     */
    public function testDonnerListeCategoriesMaladies() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeCategoriesMaladies());
    }

    /**
     * @covers ModeleUtilisateur::donnerListeMotsclesSymptomes
     * @todo   Implement testDonnerListeMotsclesSymptomes().
     */
    public function testDonnerListeMotsclesSymptomes() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeMotsclesSymptomes());
    }

    /**
     * @covers ModeleUtilisateur::donnerListeHotes
     * @todo   Implement testDonnerListeHotes().
     */
    public function testDonnerListeHotes() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeHotes());
    }

    /**
     * @covers ModeleUtilisateur::donnerListeSources
     * @todo   Implement testDonnerListeSources().
     */
    public function testDonnerListeSources() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeSources());
    }

    /**
     * @covers ModeleUtilisateur::rechercherParMaladiesSymptomesHotesSourcesDates
     * @todo   Implement testRechercherParMaladiesSymptomesHotesSourcesDates().
     */
    public function testRechercherParMaladiesSymptomesHotesSourcesDates() {
        $listeMaladie = array("Bluetongue");
        $listeSymptome = array("lameness");
        $listeHotes = array("cattle");
        $listeSources = array("Omak Okanogan County Chronicle");
        $dates = array(1443106569,1448380569);
        
        $resultat = $this->modeleUtilisateur->rechercherParMaladiesSymptomesHotesSourcesDates(null, $listeSymptome, $listeHotes, null, null, "disease", "disease", null);
        $this->assertInstanceOf("ArticleWeb",  $resultat[0]);
    }

    /**
     * @covers ModeleUtilisateur::donnerListeFluxRSS
     * @todo   Implement testDonnerListeFluxRSS().
     */
    public function testDonnerListeFluxRSS() {
        $tabFluxRSS = $this->modeleUtilisateur->donnerListeFluxRSS();
        $this->assertInstanceOf("FluxRSS",$tabFluxRSS[0]);
    }

    /**
     * @covers ModeleUtilisateur::verifierFluxExistant
     * @todo   Implement testVerifierFluxExistant().
     */
    public function testVerifierFluxExistant() {
        $this->assertFalse($this->modeleUtilisateur->verifierFluxExistant(null));
        $this->assertTrue($this->modeleUtilisateur->verifierFluxExistant("dbd7790bcd"));
    }

    /**
     * @covers ModeleUtilisateur::ajoutFluxRSS
     * @covers ModeleUtilisateur::suppressionFluxRSS
     * @todo   Implement testAjoutFluxRSS().
     */
    public function testAjoutFluxRSS() {
        $this->modeleUtilisateur->ajoutFluxRSS("idtest", "http://ceci-est-un-test.com", "official");
        $this->assertTrue($this->modeleUtilisateur->verifierFluxExistant("idtest"));
        $this->modeleUtilisateur->suppressionFluxRSS("idtest");
        $this->assertFalse($this->modeleUtilisateur->verifierFluxExistant("idtest"));
        
    }

    /**
     * @covers ModeleUtilisateur::verifierFluxAArticle
     * @todo   Implement testVerifierFluxAArticle().
     */
    public function testVerifierFluxAArticle() {        
        $this->assertTrue($this->modeleUtilisateur->verifierFluxAArticle("063f31a900"));
        $this->assertFalse($this->modeleUtilisateur->verifierFluxAArticle(null));
    }

    /**
     * @covers ModeleUtilisateur::donnerFiabiliteDuFlux
     * @todo   Implement testDonnerFiabiliteDuFlux().
     */
    public function testDonnerFiabiliteDuFlux() {
        $this->assertEquals($this->modeleUtilisateur->donnerFiabiliteDuFlux("063f31a900"),"unofficial");
    }

    /**
     * @covers ModeleUtilisateur::mettreAJourArticleRSSfeed
     * @todo   Implement testMettreAJourArticleRSSfeed().
     */
    public function testMettreAJourArticleRSSfeed() {
        $this->modeleUtilisateur->ajoutFluxRSS("idtest", "http://ceci-est-un-test.com", "official");
        $this->modeleUtilisateur->mettreAJourArticleRSSfeed("063f31a900", "idtest");
        $this->assertTrue($this->modeleUtilisateur->verifierFluxAArticle("idtest"));
        $this->modeleUtilisateur->mettreAJourArticleRSSfeed("idtest", "063f31a900");
    }


    /**
     * @covers ModeleUtilisateur::verifierHoteExistant
     * @todo   Implement testVerifierHoteExistant().
     */
    public function testVerifierHoteExistant() {
        $this->assertFalse($this->modeleUtilisateur->verifierHoteExistant(null));
        $this->assertFalse($this->modeleUtilisateur->verifierHoteExistant(1));
        $this->assertTrue($this->modeleUtilisateur->verifierHoteExistant("pigs"));
        
    }

    /**
     * @covers ModeleUtilisateur::ajoutHote
     * @covers ModeleUtilisateur::suppressionHote
     * @todo   Implement testAjoutHote().
     */
    public function testAjoutHote() {
        $this->modeleUtilisateur->ajoutHote("hoteTest");
        $this->assertTrue($this->modeleUtilisateur->verifierHoteExistant("hoteTest"));
        $this->modeleUtilisateur->suppressionHote("hoteTest");
        $this->assertFalse($this->modeleUtilisateur->verifierHoteExistant("hoteTest"));        
    }

    /**
     * @covers ModeleUtilisateur::donnerListeMaladiesAvecHotes
     * @todo   Implement testDonnerListeMaladiesAvecHotes().
     */
    public function testDonnerListeMaladiesAvecHotes() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeMaladiesAvecHotes());
    }




    /**
     * @covers ModeleUtilisateur::ajoutMaladie
     * @covers ModeleUtilisateur::verifierMaladieExistante
     * @todo   Implement testAjoutMaladie().
     */
    public function testAjoutMaladie() {
        $this->modeleUtilisateur->ajoutMaladie("maladieTest", "categorieTest");
        $this->assertTrue($this->modeleUtilisateur->verifierMaladieExistante("maladieTest"));
        $this->assertFalse($this->modeleUtilisateur->verifierMaladieExistante("maladieTestErreur"));
    }

    /**
     * @covers ModeleUtilisateur::donnerIdEnregistrement
     * @covers ModeleUtilisateur::ajoutAssHoteMaladie
     * @covers ModeleUtilisateur::verifierAssHoteMaladie
     * @covers ModeleUtilisateur::suppressionAssHoteMaladie
     * @covers ModeleUtilisateur::suppressionMaladie
     * @todo   Implement testAjoutAssHoteMaladie().
     */
    public function testAjoutAssHoteMaladie() {
        $maladieAjout = $this->modeleUtilisateur->donnerIdEnregistrement("disease", "keyword", "maladieTest");
        $this->modeleUtilisateur->ajoutAssHoteMaladie($maladieAjout, 1);
        $this->assertTrue($this->modeleUtilisateur->verifierAssHoteMaladie($maladieAjout, 1));
        $this->assertFalse($this->modeleUtilisateur->verifierAssHoteMaladie($maladieAjout, 2));
        $this->modeleUtilisateur->suppressionAssHoteMaladie($maladieAjout, 1);
        $this->assertFalse($this->modeleUtilisateur->verifierAssHoteMaladie($maladieAjout, 1));
        $this->modeleUtilisateur->suppressionMaladie($maladieAjout);
        $this->assertFalse($this->modeleUtilisateur->verifierMaladieExistante("maladieTest"));        
    }

    /**
     * @covers ModeleUtilisateur::donnerListeSymptomesAvecHotes
     * @todo   Implement testDonnerListeSymptomesAvecHotes().
     */
    public function testDonnerListeSymptomesAvecHotes() {
        $this->assertInternalType("array",  $this->modeleUtilisateur->donnerListeSymptomesAvecHotes());
    }

    /**
     * @covers ModeleUtilisateur::ajoutSymptome
     * @covers ModeleUtilisateur::verifierSymptomeEtCategorieExistant
     * @todo   Implement testAjoutSymptome().
     */
    public function testAjoutSymptome() {
        $this->modeleUtilisateur->ajoutSymptome("symptomeTest", "categorieTest");
        $this->assertTrue($this->modeleUtilisateur->verifierSymptomeEtCategorieExistant("symptomeTest", "categorieTest"));
        $this->assertFalse($this->modeleUtilisateur->verifierSymptomeEtCategorieExistant("symptomeTest", "categorie"));
    }

    /**
     * @covers ModeleUtilisateur::donnerIdEnregistrementSymptomeEtCategorie
     * @covers ModeleUtilisateur::ajoutAssHoteSymptome
     * @covers ModeleUtilisateur::verifierAssHoteSymptome
     * @covers ModeleUtilisateur::suppressionAssHoteSymptome
     * @covers ModeleUtilisateur::suppressionSymptome
     * @todo   Implement testAjoutAssHoteSymptome().
     */
    public function testAjoutAssHoteSymptome() {
        $symptomAjout = $this->modeleUtilisateur->donnerIdEnregistrementSymptomeEtCategorie("symptomeTest", "categorieTest");
        $this->modeleUtilisateur->ajoutAssHoteSymptome($symptomAjout, 1);
        $this->assertTrue($this->modeleUtilisateur->verifierAssHoteSymptome($symptomAjout, 1));
        $this->assertFalse($this->modeleUtilisateur->verifierAssHoteSymptome($symptomAjout, 2));
        $this->modeleUtilisateur->suppressionAssHoteSymptome($symptomAjout, 1);
        $this->assertFalse($this->modeleUtilisateur->verifierAssHoteSymptome($symptomAjout, 1));
        $this->modeleUtilisateur->suppressionSymptome($symptomAjout);
        $this->assertFalse($this->modeleUtilisateur->verifierSymptomeEtCategorieExistant("symptomeTest", "categorieTest"));
    }


    /**
     * @covers ModeleUtilisateur::donnerNbArticleSurLeMois
     * @todo   Implement testDonnerNbArticleSurLeMois().
     */
    public function testDonnerNbArticleSurLeMois() {
        $this->assertLessThanOrEqual($this->modeleUtilisateur->donnerNbArticleSurLeMois(1446372856, null),1);
    }

    /**
     * @covers ModeleUtilisateur::donnerNbArticleEntreDateEtFinMois
     * @todo   Implement testDonnerNbArticleEntreDateEtFinMois().
     */
    public function testDonnerNbArticleEntreDateEtFinMois() {
        $this->assertLessThanOrEqual($this->modeleUtilisateur->donnerNbArticleEntreDateEtFinMois(1446372856, null),1);
    }

    /**
     * @covers ModeleUtilisateur::donnerNbArticleEntreDateEtDebutMois
     * @todo   Implement testDonnerNbArticleEntreDateEtDebutMois().
     */
    public function testDonnerNbArticleEntreDateEtDebutMois() {
        $this->assertLessThanOrEqual($this->modeleUtilisateur->donnerNbArticleEntreDateEtDebutMois(1448532856, null),1);
    }

    /**
     * @covers ModeleUtilisateur::donnerNbArticleEntre2Dates
     * @todo   Implement testDonnerNbArticleEntre2Dates().
     */
    public function testDonnerNbArticleEntre2Dates() {
        $this->assertLessThanOrEqual($this->modeleUtilisateur->donnerNbArticleEntre2Dates(1446372856, 1448532856, null),1);
    }

    /**
     * @covers ModeleUtilisateur::rechercherMaladie
     * @todo   Implement testRechercherMaladie().
     */
    public function testRechercherMaladie() {
        $this->modeleUtilisateur->ajoutMaladie("maladieTest", "categorieTest");        
        $this->assertInternalType("array", $this->modeleUtilisateur->rechercherMaladie("categorieTest"));
        $idAjoutMaladie = $this->modeleUtilisateur->donnerIdEnregistrement("disease", "keyword", "maladieTest");
        $this->modeleUtilisateur->suppressionMaladie($idAjoutMaladie);
    }

}
